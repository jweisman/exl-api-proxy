---
  AWSTemplateFormatVersion: '2010-09-09'
  Transform: AWS::Serverless-2016-10-31
  Description: API Proxy for Ex Libris Cloud Apps
  Parameters:
    AllowedApps:
      Type: String
      Description: Comma separated list of app names
      Default: ''
    AllowedInstCodes:
      Type: String
      Description: Comma separated list of institution codes
      Default: ''
  Resources:
    ProxyAPI:
      Type: AWS::Serverless::HttpApi
      Properties:
        DefinitionBody: 
          openapi: "3.0.1"
          info:
            title: "ExLibrisAPIProxy"          
          paths:
            /{proxy+}:
              x-amazon-apigateway-any-method:
               x-amazon-apigateway-integration:
                 payloadFormatVersion: "2.0"
                 type: "aws_proxy"
                 httpMethod: "POST"
                 uri:
                   Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ExlApiProxy.Arn}/invocations"
    Dependencies:
      Type: "AWS::Serverless::LayerVersion"
      Properties:
        LayerName: !Sub "${AWS::StackName}-Dependencies"
        ContentUri: ./dependencies
        CompatibleRuntimes:
          - nodejs10.x
          - nodejs12.x
        LicenseInfo: 'Apache-2.0'
    LambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
        Path: "/"
        Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - PolicyName: secrets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - secretsmanager:GetSecretValue
              Resource: !Ref ApiKeysSecret
    ApiKeysSecret:
      Type: 'AWS::SecretsManager::Secret'
      Properties:
        Name: !Sub "${AWS::StackName}/ApiKeysSecret"
        SecretString: '{}'
    LambdaApiGatewayExecutionPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt ExlApiProxy.Arn
        Principal: apigateway.amazonaws.com
        SourceArn: !Join
          - ''
          - - 'arn:aws:execute-api:'
            - !Ref AWS::Region
            - ":"
            - !Ref AWS::AccountId
            - ":"
            - !Ref ProxyAPI
            - "/*/*"
    ExlApiProxy:
      Type: AWS::Serverless::Function
      Properties:
        FunctionName: !Sub "${AWS::StackName}-Function"
        CodeUri: ./src
        Layers:
          - !Ref Dependencies
        Handler: handler.handler
        Role: !GetAtt LambdaExecutionRole.Arn
        Runtime: nodejs12.x
        Timeout: 60
        Environment:
          Variables:
            API_KEYS_SECRET_NAME: !Ref ApiKeysSecret
            CLOUDAPP_AUTHORIZER_ALLOWED_APPS: !Ref AllowedApps
            CLOUDAPP_AUTHORIZER_ALLOWED_INST_CODES: !Ref AllowedInstCodes
  Outputs:
    ApiUrl:
      Description: URL of the API proxy
      Value: !Join
        - ''
        - - https://
          - !Ref ProxyAPI
          - ".execute-api."
          - !Ref AWS::Region
          - ".amazonaws.com/"
    ApiKeySecret:
      Description: "API Key secret. Update with the command: npm run update-keys --file=apikeys.json"
      Value: !Ref ApiKeysSecret
  